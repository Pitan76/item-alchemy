plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.pitan76.net/" }
    maven { url "https://maven.architectury.dev/" }
}

dependencies {
    implementation "com.google.guava:guava:${project.guava_version}"
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.pitan76:mcpitanlib-fabric${rootProject.mcpitanlib_version}"
    include "net.pitan76:mcpitanlib_checker-fabric:${rootProject.mcpitanlib_checker_version}"

    modLocalRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 8
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    it.options.release.set(targetJavaVersion)

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java

            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencies.'*'.findAll {
                    def groupId = it.groupId.text()
                    def artifactId = it.artifactId.text()

                    (groupId == 'net.pitan76' && artifactId.startsWith('mcpitanlib-')) ||
                            (groupId == 'net.fabricmc.fabric-api')
                }.each() {
                    it.parent().remove(it)
                    print("Removed dependency: ${it.groupId.text()}:${it.artifactId.text()}\n")
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

curseforge {
    if (System.getenv("CURSEFORGE_TOKEN") != null) {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = '697926'
            changelog = rootProject.changelog + "\nMCPitanLib version: " + mcpitanlib_version.split(":")[1]
            releaseType = 'release'
            addGameVersion '1.18.1'
            addGameVersion '1.18.2'
            addGameVersion '1.19'
            addGameVersion '1.19.1'
            addGameVersion '1.19.2'
            addGameVersion '1.20'
            addGameVersion '1.20.1'
            addGameVersion '1.20.3'
            addGameVersion '1.20.4'
            addGameVersion '1.21'
            addGameVersion '1.21.1'

            addGameVersion "Fabric"
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'mcpitanlibarch'
            }

            mainArtifact(remapJar)
        }
        options {
            forgeGradleIntegration = false
        }
    }
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
    if (System.getenv("MODRINTH_TOKEN") != null) {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = 'cfQx2fbQ'
        versionNumber = project.mod_version
        uploadFile = remapJar
        gameVersions = ['1.18.1', '1.18.2', '1.19', '1.19.1', '1.19.2', '1.20', '1.20.1', '1.20.3', '1.20.4', '1.21', '1.21.1']
        versionType = 'release'
        loaders = ['fabric']
        changelog = rootProject.changelog + "\nMCPitanLib version: " + mcpitanlib_version.split(":")[1]
        dependencies = [
                new ModDependency('P7dR8mSH', 'required'), // Fabric API
                new ModDependency('uNRoUnGT', 'required')  // MCPitanLibarch
        ]
    }
}

task publishToModSites {
    publishToModSites.dependsOn modrinth
    publishToModSites.dependsOn curseforge
}